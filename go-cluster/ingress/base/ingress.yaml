apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app-ingress
  namespace: app
  # https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
  annotations:
    nginx.ingress.kubernetes.io/server-snippet: |
      set        $cors_origin  '*';
      set        $cors_headers 'Authorization, Content-Type, Accept, X-Idempotent';
      set        $cors_methods 'POST, GET, PUT, PATCH, DELETE, OPTIONS, HEAD';
      add_header Access-Control-Allow-Origin $cors_origin always;
      add_header Access-Control-Allow-Headers $cors_headers always;
      add_header Access-Control-Allow-Methods $cors_methods always;
      if ($request_method = HEAD) {
        return 200;
      }
      if ($request_method = OPTIONS) {
        return 200;
      }
    nginx.ingress.kubernetes.io/auth-url: "http://auth.app.svc.cluster.local/permission"
    nginx.ingress.kubernetes.io/auth-snippet: |
      if ($host = "vue3.go-cinch.top") {
          return 200;
      }
      if ($host = "ocr.go-cinch.top") {
          return 200;
      }
      if ($host = "react.go-cinch.top") {
          return 200;
      }
      if ($host = "asynqmon.go-cinch.top") {
          return 200;
      }
      if ($request_uri ~* ^/api/ocr/(.*)) {
        return 200;
      }
      if ($request_uri ~* ^/api/([^/]+)/pub/(.*)) {
        return 200;
      }
      set $permission_uri "";
      if ($request_uri ~* ^/api/([^?]*)) {
        set $permission_uri /$1;
      }
      proxy_set_header X-Permission-URI $permission_uri;
    nginx.ingress.kubernetes.io/configuration-snippet: |
      absolute_redirect  off;
      add_header         Access-Control-Allow-Origin $cors_origin always;
      add_header         Access-Control-Allow-Headers $cors_headers always;
      add_header         Access-Control-Allow-Methods $cors_methods always;
      
      rewrite ^/api/auth/pub/(.*)$ /pub/$1 break;
      rewrite ^/api/auth/(.*)$ /$1 break;
      rewrite ^/api/oss/pub/(.*)$ /pub/$1 break;
      rewrite ^/api/oss/(.*)$ /$1 break;
      rewrite ^/api/ocr/(.*)$ /$1 break;
spec:
  tls:
  - secretName: app-ingress-tls
  ingressClassName: nginx
  rules:
  - host: "app.go-cinch.top"
    http:
      paths:
      - path: /api/auth/pub/
        pathType: Prefix
        backend:
          service:
            name: auth
            port:
              number: 80
      - path: /api/auth/
        pathType: Prefix
        backend:
          service:
            name: auth
            port:
              number: 80
      - path: /api/oss/pub/
        pathType: Prefix
        backend:
          service:
            name: oss
            port:
              number: 80
      - path: /api/oss/
        pathType: Prefix
        backend:
          service:
            name: oss
            port:
              number: 80
      - path: /api/ocr/
        pathType: Prefix
        backend:
          service:
            name: ocr
            port:
              number: 80
  - host: 'vue3.go-cinch.top'
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: vue3
            port:
              number: 80
  - host: 'ocr.go-cinch.top'
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ocr-vue3
            port:
              number: 80
  - host: 'react.go-cinch.top'
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: react
            port:
              number: 80
  - host: 'asynqmon.go-cinch.top'
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: asynqmon
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: grafana
spec:
  tls:
  - secretName: grafana-ingress-tls
  ingressClassName: nginx
  rules:
  - host: 'grafana.go-cinch.top'
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus-ingress
  namespace: prometheus
spec:
  tls:
  - secretName: prometheus-ingress-tls
  ingressClassName: nginx
  rules:
  - host: 'prometheus.go-cinch.top'
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jaeger-ingress
  namespace: jaeger
spec:
  tls:
  - secretName: jaeger-ingress-tls
  ingressClassName: nginx
  rules:
  - host: 'jaeger.go-cinch.top'
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jaeger-query
            port:
              number: 16686
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-ingress
  namespace: minio
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - secretName: minio-ingress-tls
  ingressClassName: nginx
  rules:
  - host: 'minio-api.go-cinch.top'
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: minio
            port:
              name: http-minio
  - host: 'minio.go-cinch.top'
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: minio
            port:
              name: http-minio-ui
